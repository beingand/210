The Responsive Images assignment revealed some confusion between a float based layout and a flexbox layout.  I've created three examples to show you the differences. 

All three of the layouts below have the following CSS to make the images responsive:

.responsiveImage {
    max-width: 100%;
    height: auto;
}

---------------

FLEX + WRAP

https://beingandzip.me/210/dogs/dogsFlexWrap.html

To illustrate this behavior I've set each flex item to a fixed width of 15em. Notice how the browser makes another row when there is not enough room for another flex item on the current row.  

main {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    border: solid blue thin;
}

.dogs div {
    border: solid red thin;
    width: 15em; // fixed width keeps images from expanding
}

---------------

FLEX DIRECTION CHANGED FROM COL TO ROW

At 750px breakpoint the flex-direction changes from col to row.

https://beingandzip.me/210/dogs/dogsFlexColToRow.html

Here's the CSS:

main {
    display: flex;
    flex-direction: column;
    border: solid blue thin;
}

.dogs div {
    border: solid red thin;
}

@media screen and (min-width:750px) {
    main {
        flex-direction: row;
    }
}

---------------

FLOAT + PERCENTAGE WIDTHS:

This was, in my opinion, the simplest solution to the responsive images assignment. 

https://beingandzip.me/210/dogs/dogsFloat.html

Here's the CSS:

.dogs div {
    float: left;
    width: 100%;
    border: solid red thin;
    overflow: show;
}

@media screen and (min-width:400px) {
    .dogs div {
        width: 50%;
    }
}

@media screen and (min-width:600px) {
    .dogs div {
        width: 33.33%;
    }
}

@media screen and (min-width:1000px) {
    .dogs div {
        width: 16.66%;
    }
}


